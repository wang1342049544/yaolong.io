I"0M<p>​</p>

<p>参考博客：https://blog.csdn.net/a745233700/article/details/80959716</p>

<h1 id="1什么-是spring">1.什么 是spring</h1>

<p>Spring是Java EE编程领域的一个轻量级开源框架，该框架由<strong>罗德·约翰逊（程序员）</strong>在 2002 年提出创建，它的诞生是为了简化应用程序的开发，Spring提供了功能强大IOC、<a href="https://baike.baidu.com/item/AOP/1332219">AOP</a>及Web MVC等功能。</p>

<p>Spring可以和其他Web框架组合使用，也可以单独应用构筑应用程序，因此， Spring不仅仅能应用于JEE应用程序之中，也可以应用于桌面应用程序以及小应用程序之中。</p>

<p>Spring是一个开源容器框架， 它集成各类型的工具，通过核心的Bean factory实现了<strong>底层的类的实例化</strong>和<strong>生命周期的管理</strong>。在整个框架中，各类型的功能被抽象成一个个的 Bean，这样就可以实现各种功能的管理，包括动态加载和切面编程。</p>

<p><strong>主要由以下几个模块组成：</strong></p>

<p>Spring Core：核心类库，提供IOC服务；</p>

<p>Spring Context：提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）；</p>

<p>Spring AOP：AOP服务；</p>

<p>Spring DAO：对JDBC的抽象，简化了数据访问异常的处理；</p>

<p>Spring ORM：对现有的ORM框架的支持；</p>

<p>Spring Web：提供了基本的面向Web的综合特性，例如多方文件上传；</p>

<p>Spring MVC：提供面向Web应用的Model-View-Controller实现。</p>

<p><strong>Spring 的优点？</strong></p>

<p>（1）spring属于低侵入式设计，代码的污染极低；</p>

<p>（2）spring的DI机制将对象之间的依赖关系交由框架处理，减低组件的耦合性；</p>

<p>（3）Spring提供了AOP技术，支持将一些通用任务，如安全、事务、日志、权限等进行集中式管理，从而提供更好的复用。</p>

<p>（4）spring对于主流的应用框架提供了集成支持。</p>

<hr />

<h1 id="2spring框架组成">2.Spring框架组成？</h1>

<p>Spring 框架是一个分层架构，由 <strong>7 个定义良好的模块</strong>组成</p>

<p><strong>1、核心容器（</strong>Spring Core）</p>

<p>核心容器提供 Spring 框架的基本功能，核心容器的主要组件是 <strong>BeanFactory</strong>，它是<a href="https://baike.baidu.com/item/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">工厂模式</a>的实现。BeanFactory 使用<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC">控制反转</a>（IOC） 模式将<strong>应用程序的配置</strong>和<strong>依赖性规范</strong>与<strong>实际的应用程序代码</strong>分开</p>

<p><strong>2、Spring 上下文</strong>（Context）</p>

<p>Spring 上下文是一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a>，向 Spring框架提供上下文信息，提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）</p>

<p><strong>3、Spring AOP：面向切面的编程</strong></p>

<p>通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持<a href="https://baike.baidu.com/item/AOP">AOP</a>。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p>

<p><strong>4、Spring DAO：（JDBC抽象和DAO模块）</strong></p>

<p>JDBC<a href="https://baike.baidu.com/item/DAO">DAO</a>抽象层提供了有意义的异常层次结构，可用该结构来管理<a href="https://baike.baidu.com/item/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a>和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</p>

<p><strong>5、Spring ORM：（对象/关系映射集成模块）</strong></p>

<p>对那些更喜欢使用对象/关系映射工具而不是直接使用JDBC的 人，Spring提供了ORM模块。Spring并不试图实现它自己的ORM解决方案，而是为几种流行的ORM框架提供了集成方案，包括 Hibernate、JDO和iBATIS SQL映射。Spring的事务管理支持这些ORM框架中的每一个也包括JDBC。</p>

<p><strong>6、Spring Web 模块：</strong></p>

<p>spring的web模块构建在application context模块基础之上，提供一个适合web应用的上下文，这个模块也包括支持多种面向web的任务，如<strong>透明的处理多个文件上传请求到你的业务对象</strong>，它也有对jakarta struts支持</p>

<p><strong>7、Spring MVC 框架：</strong></p>

<p>Spring为构建Web应用提供了一个功能全面的MVC框架。虽然Spring可以很容易地与其它MVC框架集成，例如Struts，但Spring的MVC框架使用IoC对控制逻辑和业务对象提供了完全的分离。</p>

<hr />

<p>#</p>

<h1 id="3spring的aop理解">3.<strong>Spring的AOP理解：</strong></h1>

<p>OOP面向对象，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</p>

<p>AOP，一般称为<strong>面向切面</strong>，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理。</p>

<p>AOP实现的关键在于 <strong>代理模式</strong>，AOP代理主要分为静态代理和动态代理。静态代理的代表为<strong>AspectJ</strong>；动态代理则以<strong>Spring AOP</strong>为代表。</p>

<p>（1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。</p>

<p>（2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p>

<h4 id="spring-aop中的动态代理主要有两种方式jdk动态代理和cglib动态代理"><strong>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理</strong></h4>

<p>​        ①JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例,  生成目标类的代理对象。</p>

<p>​        ②如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p>

<p>（3）静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。</p>

<blockquote>
  <p>InvocationHandler 的 invoke(Object  proxy,Method  method,Object[] args)：proxy是最终生成的代理实例;  method 是被代理目标实例的某个具体方法;  args 是被代理目标实例某个方法的具体入参, 在方法反射调用时使用。</p>
</blockquote>

<hr />

<h1 id="4-spring-ioc控制反转-理解--">4. spring ioc(控制反转 )理解  ?</h1>

<p>spring ioc(控制反转 )是 面向对象编程中的一种设计原则，IOC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。交由Spring容器统一进行管理，从而实现松耦合（减低代码之间耦合度）<em>**</em></p>

<p>在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制</p>

<p>●谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>

<p>●为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们<strong>自己在对象中主动控制去直接获取依赖对象</strong>，也就是正转；而反转则是由<strong>容器来帮忙创建及注入依赖对象</strong>；</p>

<p><strong>为何是反转？</strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；</p>

<p><strong>哪些方面反转了？</strong>依赖对象的获取被反转了。</p>

<hr />

<h2 id="5-spring-常用的注入方式有哪些有哪些不同类型ioc依赖注入方式">5. spring 常用的注入方式有哪些？有哪些不同类型ioc（依赖注入）方式？</h2>

<p>Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。</p>

<p><strong>构造器依赖注入</strong>：构造器依赖注入通过容器触发一个类的构造器来实现 的，该类有一系列参数，每个参数代表一个对其他类的依赖。
<strong>Setter 方法注入</strong>：Setter 方法注入是容器通过调用无参构造器或无参</p>

<p><strong>哪种依赖注入你建议使用？</strong></p>

<p>都可以  ，最好解决方案是：构造器参数实现强制依赖，setter方法实现可选依赖</p>

<hr />

<h1 id="6spring框架中的单例beans是线程安全的么">6.<strong>Spring框架中的单例Beans是线程安全的么？</strong></h1>

<p>Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。但实际上，大部分的Spring</p>

<p>bean并没有可变的状态(比如Serview类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。如果你的bean有多种状态的话（比如
 View Model 
对象），就需要自行保证线程安全。最浅显的解决办法就是将多态bean的作用域由“singleton”变更为“prototype”</p>

<p>​</p>

<hr />

<h1 id="7--spring-支持几种-bean-的作用域">7  spring 支持几种 bean 的作用域？</h1>

<p><strong>Spring支持的几种bean的作用域。</strong></p>

<p>Spring容器中的bean可以分为5个范围：</p>

<p>（1）singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。</p>

<p>（2）prototype：为每一个bean请求提供一个实例。</p>

<p>（3）request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。</p>

<p>（4）session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。</p>

<p>（5）global-session：全局作用域，global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。全局作用域与Servlet中的session作用域效果相同。</p>

<p>​</p>

<hr />

<h1 id="8spring-自动装配-bean-有哪些方式">8.spring 自动装配 bean 有哪些方式？</h1>

<p>在Spring框架xml配置中共有5种自动装配：</p>

<p>（1）no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</p>

<p>（2）byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。</p>

<p>（3）byType：通过参数的数据类型进行自动装配。</p>

<p>（4）constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</p>

<p>（5）autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。</p>

<hr />

<h1 id="9spring-事务实现方式有哪些">9.spring 事务实现方式有哪些？</h1>

<p>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。</p>

<p><strong>（1）Spring事务的种类：</strong></p>

<p>spring支持<strong>编程式事务管理</strong>和<strong>声明式事务管理</strong>两种方式：</p>

<p>①编程式事务管理使用TransactionTemplate。</p>

<p>②声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>

<hr />

<h1 id="10---说一下-spring-的事务隔离">10   说一下 spring 的事务隔离？</h1>

<p>① ISOLATION_DEFAULT：这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。</p>

<p>② ISOLATION_READ_UNCOMMITTED：读未提交，允许另外一个事务可以看到这个事务未提交的数据。</p>

<p>③ ISOLATION_READ_COMMITTED：读已提交，保证一个事务修改的数据提交后才能被另一事务读取，而且能看到该事务对已有记录的更新。</p>

<p>④ ISOLATION_REPEATABLE_READ：可重复读，保证一个事务修改的数据提交后才能被另一事务读取，但是不能看到该事务对已有记录的更新。</p>

<p>⑤ ISOLATION_SERIALIZABLE：一个事务在执行的过程中完全看不到其他事务对数据库所做的更新</p>

<hr />

<h1 id="11spring框架中的单例--beans-是线程安全的吗">11.spring框架中的单例  beans 是线程安全的吗？</h1>

<p>Spring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说Spring容器中的Bean本身不具备线程安全的特性，但是具体还是要结合具体 <strong>作用域(scope)</strong>的Bean去研究</p>

<p>线程安全这个问题，要从单例与原型Bean分别进行说明。</p>

<p><strong>原型Bean</strong>
对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。</p>

<p><strong>单例Bean</strong>
对于单例Bean,所有线程都共享一个单例实例Bean,因此是存在资源的竞争。</p>

<p>如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身</p>

<p><strong>Spring 的 bean 作用域（scope）类型</strong>
1、singleton:单例，默认作用域。</p>

<p>2、prototype:原型，每次创建一个新对象。</p>

<p>3、request:请求，每次Http请求创建一个新对象，适用于WebApplicationContext环境下。</p>

<p>4、session:会话，同一个会话共享一个实例，不同会话使用不用的实例。</p>

<p>5、global-session:全局会话，所有会话共享一个实例。</p>

<hr />

<h1 id="12spring容器中的bean可以分为5个范围">12.Spring容器中的bean可以分为5个范围：</h1>

<p>（1）singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。</p>

<p>（2）prototype：为每一个bean请求提供一个实例。</p>

<p>（3）request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。</p>

<p>（4）session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。</p>

<p>（5）global-session：全局作用域，global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。全局作用域与Servlet中的session作用域效果相同。</p>

<hr />

<h1 id="13spring-自动装配-bean-有哪些方式">13.spring 自动装配 bean 有哪些方式？</h1>

<p>在Spring框架xml配置中共有5种自动装配：</p>

<p>（1）no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</p>

<p>（2）byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。</p>

<p>（3）byType：通过参数的数据类型进行自动装配。</p>

<p>（4）constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</p>

<p>（5）autode</p>

<hr />

<h1 id="14spring-事务实现方式有哪些">14.spring 事务实现方式有哪些？</h1>

<p>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。</p>

<p><strong>（1）Spring事务的种类：</strong></p>

<p>spring支持编程式事务管理和声明式事务管理两种方式：</p>

<p>①编程式事务管理使用TransactionTemplate。</p>

<p>②声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>

<hr />

<h1 id="15说一下-spring-的事务隔离">15说一下 spring 的事务隔离？</h1>

<blockquote>
  <p>① ISOLATION_DEFAULT：这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。</p>

  <p>② ISOLATION_READ_UNCOMMITTED：读未提交，允许另外一个事务可以看到这个事务未提交的数据。</p>

  <p>③ ISOLATION_READ_COMMITTED：读已提交，保证一个事务修改的数据提交后才能被另一事务读取，而且能看到该事务对已有记录的更新。</p>

  <p>④ ISOLATION_REPEATABLE_READ：可重复读，保证一个事务修改的数据提交后才能被另一事务读取，但是不能看到该事务对已有记录的更新。</p>

  <p>⑤ ISOLATION_SERIALIZABLE：一个事务在执行的过程中完全看不到其他事务对数据库所做的更新。</p>
</blockquote>
:ET